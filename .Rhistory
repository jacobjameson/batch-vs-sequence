# Categorize Vital Signs -------------------------------------------------
#=========================================================================
df$tachycardic <- ifelse(
is.na(df$TRIAGE_PULSE) == F & df$TRIAGE_PULSE > 100, 1, 0
)
df$tachypneic <- ifelse(
is.na(df$TRIAGE_RR)  == F  & df$TRIAGE_RR > 20, 1, 0
)
df$febrile <- ifelse(
is.na(df$TRIAGE_TEMP)  == F  & df$TRIAGE_TEMP > 38, 1, 0
)
df$hypotensive <- ifelse(
is.na(df$TRIAGE_SBP)  == F  & df$TRIAGE_SBP < 90, 1, 0
)
#=========================================================================
# Create Time FE ---------------------------------------------------------
#=========================================================================
df <- df %>%
mutate(rel_minutes_arrival = ARRIVAL_DTTM_REL,
rel_minutes_depart = rel_minutes_arrival + ED_LOS)
# Define arbitrary start date
start_date <- as.POSIXct("2018-10-06 00:00:00", tz = "UTC")
# Convert relative minutes to datetime
df$datetime <- start_date + minutes(df$rel_minutes_arrival) - minutes(min(df$rel_minutes_arrival))
# Extract hour of day, day of week, and month of year
df$hour_of_day <- hour(df$datetime)
df$hour_of_day <- cut(df$hour_of_day, breaks = c(-Inf, 6, 12, 18, Inf),
labels = c("Block 1", "Block 2", "Block 3", "Block 4"))
df$day_of_week <- weekdays(df$datetime)
df$month_of_year <- month(df$datetime, label = TRUE)
df$dayofweekt <- paste(df$day_of_week, df$hour_of_day)
# Calculate the number of patients in the hospital at the time of
# each patient's arrival
df$patients_in_hospital <- sapply(df$rel_minutes_arrival,
function(arrival_time) {
sum(df$rel_minutes_arrival <= arrival_time &
df$rel_minutes_depart > arrival_time
) - 1
})
#=========================================================================
# Create Final Dataset ---------------------------------------------------
#=========================================================================
df$ln_ED_LOS <- log(df$ED_LOS)
final <- df %>%
mutate(RTN_72_HR = ifelse(RTN_72_HR == 'Y', 1, 0),
RTN_72_HR_ADMIT = ifelse(RTN_72_HR_ADMIT == 'Y', 1, 0))
final$admit = ifelse(final$ED_DISPOSITION == 'Admit', 1, 0)
final$discharge = ifelse(final$ED_DISPOSITION == 'Discharge', 1, 0)
final$observation = ifelse(final$ED_DISPOSITION == 'Hospital Observation', 1, 0)
final <- final %>%
mutate(dispo = case_when(
admit == 1 ~ 'admit',
discharge == 1 ~ 'discharge',
observation == 1 ~ 'observeration',
TRUE ~ 'other'))
# Limit dataset to only physicians that had more than 520 encounters
provider_counts <- table(final$ED_PROVIDER)
providers_less_than_500 <- names(provider_counts[provider_counts < 520])
final <- final[!(final$ED_PROVIDER %in% providers_less_than_500), ]
final$complaint_esi <- paste(final$CHIEF_COMPLAINT, final$ESI)
# Limit to prevalent complaints only
final <- final %>%
group_by(CHIEF_COMPLAINT) %>%
filter(n() > 1000) %>%
ungroup() %>%
filter(is.na(ESI) == F, ED_LOS < 6000, ED_LOS > 0)
#=========================================================================
# Create Batch Tendency -------------------------------------------------
#=========================================================================
library(caret)
library(pROC)
# Assuming 'final' is your dataset
set.seed(123)
final$fold <- sample(1:10, nrow(final), replace = TRUE)
final <- arrange(final, fold)
# Pre-allocate predictions
predictions <- numeric(nrow(final))
# Loop over the folds
for (i in 1:10) {
# Split the data into training and testing sets
train_data <- final[final$fold != i, ]
test_data <- final[final$fold == i, ]
# Fit the model with fixest::feglm, which is optimized for many fixed effects
model <- feglm(
batched ~ 0 | hypotensive + tachycardic + tachypneic + febrile +
ED_PROVIDER + CHIEF_COMPLAINT + ESI + dayofweekt + month_of_year,
data = train_data, family = "binomial"
)
# Make predictions for the test set
predictions[final$fold == i] <- predict(model, newdata = test_data, type = "response")
print(i)
}
library(fixest)
library(caret)
library(pROC)
# Assuming 'final' is your dataset
set.seed(123)
final$fold <- sample(1:10, nrow(final), replace = TRUE)
final <- arrange(final, fold)
# Pre-allocate predictions
predictions <- numeric(nrow(final))
# Loop over the folds
for (i in 1:10) {
# Split the data into training and testing sets
train_data <- final[final$fold != i, ]
test_data <- final[final$fold == i, ]
# Fit the model with fixest::feglm, which is optimized for many fixed effects
model <- feglm(
batched ~ 0 | hypotensive + tachycardic + tachypneic + febrile +
ED_PROVIDER + CHIEF_COMPLAINT + ESI + dayofweekt + month_of_year,
data = train_data, family = "binomial"
)
# Make predictions for the test set
predictions[final$fold == i] <- predict(model, newdata = test_data, type = "response")
print(i)
}
# Assign predictions to the final dataset
final$predicted_prob <- predictions
# Step 2: get a leave one out probability for each provider
final <- final %>%
group_by(ED_PROVIDER) %>%
mutate(Sum_prob=sum(predicted_prob, na.rm=T),
batch.tendency = (Sum_prob - predicted_prob) / (n() - 1)) %>%
ungroup()
final$batch.tendency <- as.vector(scale(final$batch.tendency))
test <- final %>%
filter(datetime >= '2019-10-01')
train <- final %>%
filter(datetime < '2019-10-01')
# Step 3: fit a logistic regression model to predict batched
frmla <- as.formula(
"batched ~ ED_PROVIDER + dayofweekt + month_of_year + CHIEF_COMPLAINT*ESI  +
hypotensive + tachycardic + tachypneic + febrile"
)
glm_model <- feglm(0|batched ~ ED_PROVIDER + dayofweekt + month_of_year + CHIEF_COMPLAINT*ESI  +
hypotensive + tachycardic + tachypneic + febrile, data = train, family = 'binomial')
test$predicted_prob <- predict(glm_model, test, type = 'response')
roc_obj1 <- roc(final$batched, final$predicted_prob)
roc_obj2 <- roc(test$batched, test$predicted_prob)
# Create a data frame for ggplot
roc_data1 <- data.frame(
specificity = 1 - roc_obj1$specificities,
sensitivity = roc_obj1$sensitivities,
model = "10-fold CV"
)
roc_data2 <- data.frame(
specificity = 1 - roc_obj2$specificities,
sensitivity = roc_obj2$sensitivities,
model = "Test Set (Last 2 Months)"
)
roc_data <- rbind(roc_data1, roc_data2)
# Calculate AUCs
auc1 <- auc(roc_obj1)
auc2 <- auc(roc_obj2)
roc_data <- roc_data %>%
mutate(model = case_when(
model == "10-fold CV" ~ paste0("10-fold CV AUC: ", round(auc1, 3)),
model == "Test Set (Last 2 Months)" ~ paste0("Test Set (Last 2 Months) AUC: ", round(auc2, 3))
))
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0.6, 0.1),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggsave("roc_curves.png", width = 9.5, height = 8, dpi = 300)
rm(list = setdiff(ls(), "final"))
data <- final
#=========================================================================
ggsave("roc_curves.pdf", width = 9.5, height = 8, dpi = 300)
rm(list = setdiff(ls(), "final"))
data <- final
data_for_plot <- data
data_for_plot <- data_for_plot %>%
mutate(CHIEF_COMPLAINT = ifelse(
CHIEF_COMPLAINT == "Falls, Motor Vehicle Crashes, Assaults, and Trauma",
"Assaults and Trauma",  CHIEF_COMPLAINT)) %>%
group_by(ED_PROVIDER, CHIEF_COMPLAINT) %>%
summarize(batch_rate = mean(batched)) %>%
ungroup()
ggplot(data = data_for_plot, aes(x = reorder(CHIEF_COMPLAINT, -batch_rate),
y = batch_rate,
fill = CHIEF_COMPLAINT)) +
geom_boxplot(alpha=0.4, outlier.shape = NA, color = "black") +
geom_jitter(aes(color = CHIEF_COMPLAINT), width = 0.1, alpha = 1, size=3.5) +
scale_fill_manual(values = gdocs_pal()(24)) +
scale_color_manual(values = gdocs_pal()(24)) +
theme_minimal(base_size = 18) +
coord_flip() +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 20),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'black', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = 'none',
axis.title = element_text(size = 20, color = 'black'),
axis.title.y = element_blank(),
strip.text.x = element_text(size = 20, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
) +
labs(
title = "",
y = "\nPhysician Batch Rates", x = "Chief Complaint"
) +
scale_y_continuous(labels = percent_format(scale = 100), limits = c(-0.01, .5)) +
guides(fill = guide_legend(override.aes = list(alpha = 1)))
ggplot(data = data_for_plot, aes(x = reorder(CHIEF_COMPLAINT, -batch_rate),
y = batch_rate,
fill = CHIEF_COMPLAINT)) +
geom_boxplot(alpha=0.4, outlier.shape = NA, color = "black", size=2) +
geom_jitter(aes(color = CHIEF_COMPLAINT), width = 0.1, alpha = 1, size=3.5) +
scale_fill_manual(values = gdocs_pal()(24)) +
scale_color_manual(values = gdocs_pal()(24)) +
theme_minimal(base_size = 18) +
coord_flip() +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 20),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'black', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = 'none',
axis.title = element_text(size = 20, color = 'black'),
axis.title.y = element_blank(),
strip.text.x = element_text(size = 20, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
) +
labs(
title = "",
y = "\nPhysician Batch Rates", x = "Chief Complaint"
) +
scale_y_continuous(labels = percent_format(scale = 100), limits = c(-0.01, .5)) +
guides(fill = guide_legend(override.aes = list(alpha = 1)))
ggplot(data = data_for_plot, aes(x = reorder(CHIEF_COMPLAINT, -batch_rate),
y = batch_rate,
fill = CHIEF_COMPLAINT)) +
geom_boxplot(alpha=0.4, outlier.shape = NA, color = "black") +
geom_jitter(aes(color = CHIEF_COMPLAINT), width = 0.1, alpha = 1, size=3.5) +
scale_fill_manual(values = gdocs_pal()(24)) +
scale_color_manual(values = gdocs_pal()(24)) +
theme_minimal(base_size = 18) +
coord_flip() +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 20),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey80', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = 'none',
axis.title = element_text(size = 20, color = 'black'),
axis.title.y = element_blank(),
strip.text.x = element_text(size = 20, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
) +
labs(
title = "",
y = "\nPhysician Batch Rates", x = "Chief Complaint"
) +
scale_y_continuous(labels = percent_format(scale = 100), limits = c(-0.01, .5)) +
guides(fill = guide_legend(override.aes = list(alpha = 1)))
ggsave("outputs/figures/Figure 1.pdf",
width = 15, height = 13, dpi = 300, bg = 'white')
ggplot(data = data_for_plot, aes(x = reorder(CHIEF_COMPLAINT, -batch_rate),
y = batch_rate,
fill = CHIEF_COMPLAINT)) +
geom_boxplot(alpha=0.4, outlier.shape = NA, color = "black") +
geom_jitter(aes(color = CHIEF_COMPLAINT), width = 0.1, alpha = 1, size=3.5) +
scale_fill_manual(values = gdocs_pal()(24)) +
scale_color_manual(values = gdocs_pal()(24)) +
theme_minimal(base_size = 18) +
coord_flip() +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 20),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey20', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = 'none',
axis.title = element_text(size = 20, color = 'black'),
axis.title.y = element_blank(),
strip.text.x = element_text(size = 20, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
) +
labs(
title = "",
y = "\nPhysician Batch Rates", x = "Chief Complaint"
) +
scale_y_continuous(labels = percent_format(scale = 100), limits = c(-0.01, .5)) +
guides(fill = guide_legend(override.aes = list(alpha = 1)))
ggsave("outputs/figures/Figure 1.pdf",
width = 15, height = 13, dpi = 300, bg = 'white')
model <- glm(batched ~ batch.tendency +
dayofweekt + month_of_year + complaint_esi + LAB_PERF +
hypotensive + tachycardic + tachypneic + febrile,
family = binomial, data = data)
get_predictions <- function(model, predictor) {
ggpredict(model, terms = c(paste(predictor, "[-2:2, by=.1]")),
vcov.type = "HC0",
vcov.args = list(cluster = data$ED_PROVIDER)) %>%
as.data.frame() %>%
dplyr::select(xvals = x, coef = predicted,
lower = conf.low, upper = conf.high) %>%
filter(!is.na(xvals))
}
preds <- get_predictions(model, "batch.tendency")
data.p <- data.frame(batch.tendency = preds$xvals,
predicted_prob = preds$coef,
lwr = preds$lower, upr = preds$upper)
data.p %>%
ggplot(aes(x = batch.tendency, y = predicted_prob)) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.8, fill = "#a6cee3") +
geom_line(aes(y=predicted_prob), color = '#1f78b4',  size=2) +
scale_x_continuous(expand = expansion(mult = c(0.01, 0.05))) +
scale_y_continuous(labels = scales::percent, limits = c(0,0.075),
expand = expansion(mult = c(0, 0.05))) +
annotate("rect", xmin = -2, xmax = 0, ymin = 0.035, ymax = 0.075,
fill = "white", color = "black", size = 0.5) +
annotate("text", x = -1, y = 0.055,
label = str_wrap("Conditional on time, patient complaint,
and severity, a physician with a batch tendency
score of 2 is 4x as likely to batch order imaging tests at a
given patient encounter compared to a physician
with a batch tendency score of -2",  42),
size = 5.75, color = "black") +
annotate("segment", x = -1, xend = -2, y = 0.035, yend = 0.012, linetype = "dashed",
size = 0.5, color = "black", arrow = arrow(length = unit(0.2, "cm"))) +
annotate("segment", x = 0, xend = 1.95, y = 0.055, yend = 0.053, linetype = "dashed",
size = 0.5, color = "black", arrow = arrow(length = unit(0.2, "cm"))) +
geom_curve(aes(x = 0.9, y = 0.0125, xend = 0.0, yend = 0.025),
curvature = -0.2, arrow = arrow(type = "closed", length = unit(0.2, "cm")),
color = "black", size = 0.5) +
annotate("text", x = 1.55, y = 0.0125,
label = str_wrap("Batch Ordering Probability of a Physician with
the Average Batch Tendency",  30),
size = 5, color = "black") +
theme_minimal(base_size = 16) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = 'none',
axis.title = element_text(size = 20, color = 'black'),
#axis.title.y = element_blank(),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
) +
labs(x = '\nBatch Tendency',
y = 'Predicted Probability of Batch Ordering \n',
title = '')
ggsave("outputs/figures/Figure 2A.pdf", width = 10.5, height = 8, bg = 'white')
data_for_plot <- data.frame(ED_LOS = data$ED_LOS)
data_for_plot$group <- 'ED_LOS'
data_for_plot <- rbind(data_for_plot,
data.frame(ED_LOS = data$ln_ED_LOS, group = 'ln_ED_LOS'))
data_for_plot %>%
mutate(group = ifelse(
group == 'ED_LOS', 'ED Length of Stay',
'Log Transformed ED Length of Stay')) %>%
ggplot(aes(x = ED_LOS, y = ..density..)) +
geom_histogram(aes(fill = group), color='black', bins = 30, alpha = 0.35) +
scale_fill_brewer(palette = 'Set1') +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~group, scales = 'free') +
scale_x_continuous(expand = expansion(mult = c(0.01, 0.05))) +
scale_y_continuous(labels = scales::percent, limits = c(0,0.125),
expand = expansion(mult = c(0, 0.05))) +
geom_density(aes(color = group), size = 1.5) +
labs(
x = '\nED Length of Stay (minutes)',
y = 'Probability Density\n',
title = 'Distribution of ED Length of Stay Before and After Log Transformation\n'
) +
scale_x_continuous(labels = scales::comma) +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = 'none',
axis.title = element_text(size = 20, color = 'black'),
axis.title.y = element_blank(),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggsave("outputs/figures/Figure 3A.pdf", width = 11.5, height = 7, bg = 'white')
data <- data %>%
mutate(ESI_cat = case_when(
ESI == 1 ~ 'ESI \n1 or 2',
ESI == 2 ~ 'ESI \n1 or 2',
ESI == 3 ~ 'ESI \n3, 4, or 5',
ESI == 4 ~ 'ESI \n3, 4, or 5',
ESI == 5 ~ 'ESI \n3, 4, or 5'))
data$ESI_cat <- as.factor(data$ESI_cat)
complaints <- unique(data$CHIEF_COMPLAINT)
model_for_complaint <- function(complaint, esi, outcome_var) {
formula <- as.formula(paste(outcome_var, "~ batch.tendency | LAB_PERF + dayofweekt + month_of_year|0|ED_PROVIDER"))
mod <- felm(formula, data = filter(data, CHIEF_COMPLAINT == complaint, ESI_cat == esi))
coef <- as.numeric(mod$beta[[1]])
cse <- as.numeric(mod$cse[[1]])
row <- c(coef, cse, complaint, esi, outcome_var)
return(row)
}
results <- data.frame(
coef = numeric(),
cse = numeric(),
complaint = character(),
esi = character(),
outcome_var = character()
)
r_number <- 1
total_tests <- length(complaints) * 2 * 3  # 2 ESI categories, 3 outcome variables
adjusted_alpha <- 0.05 / total_tests
z_value <- qnorm(1 - adjusted_alpha / 2)  # Calculate z-value for the adjusted alpha
for (complaint in complaints) {
for (esi in c('ESI \n1 or 2', 'ESI \n3, 4, or 5')) {
for (outcome in c('ln_ED_LOS', 'imgTests', 'RTN_72_HR_ADMIT')) {
row <- model_for_complaint(complaint, esi, outcome)
results[r_number,] <- row
r_number <- r_number + 1
}
}
}
results <- results %>%
mutate(
coef = as.numeric(coef),
cse = as.numeric(cse),
CI_lower_b = coef - z_value * cse,
CI_upper_b = coef + z_value * cse,
CI_lower = coef - 1.96 * cse,
CI_upper = coef + 1.96 * cse
)
results %>%
mutate(
complaint = ifelse(
complaint == "Falls, Motor Vehicle Crashes, Assaults, and Trauma",
"Assaults and Trauma",  complaint),
outcome_var = case_when(
outcome_var == 'ln_ED_LOS' ~ 'Log ED Length of Stay',
outcome_var == 'imgTests' ~ 'Number of Imaging \nTests Ordered',
outcome_var == 'RTN_72_HR_ADMIT' ~ 'Return with Admission \nwithin 72 Hours'
),
esi_group = as.numeric(factor(esi)),
significance = ifelse(CI_lower > 0 | CI_upper < 0, "p < 0.05", "p > 0.05")) %>%
ggplot(aes(x = complaint, y = coef, group = esi_group, color = significance)) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
geom_errorbar(aes(ymin = CI_lower, ymax = CI_upper, linetype = "Regular 95% CI"),
position = position_dodge(width = 0), size=0.6) +
geom_errorbar(aes(ymin = CI_lower_b, ymax = CI_upper_b,  linetype = "Bonferroni-adjusted 95% CI"),
position = position_dodge(width = 0.5),size = 0.6) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
facet_grid(esi~ outcome_var, scales='free') +
coord_flip() +
scale_color_manual(values = c("p < 0.05" = "black",
"p > 0.05" = "#74767899")) +
labs(
x = "Complaint",
y = "\nCoefficient (Effect Size)",
color = "Significance",
linetype = "CI Type"
) +
theme_minimal(base_size = 18) +
theme(
panel.spacing.x = unit(2, "lines"),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5), # Add border around each panel
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 20),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
strip.background.x = element_rect(fill = "grey90"),
axis.title = element_text(size = 20, color = 'black'),
axis.title.y = element_blank(),
strip.text.x = element_text(size = 19, face = "bold", color = 'black') ,
strip.text.y = element_text(size = 19, color = 'black') ,
axis.line = element_line(colour = "black"),
legend.position = "top",
legend.key.size = unit(1.5, "lines"),
legend.background = element_rect(colour = "black")
)
ggsave("outputs/figures/Figure 2.pdf", width = 16, height = 15.5, dpi = 300, bg = 'white')
