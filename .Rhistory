model == "Test Set (Last 2 Months)" ~ paste0("Test Set (Last 2 Months) AUC: ", round(auc2, 3))
roc_data <- roc_data %>%
mutate(model = case_when(
model == "10-fold CV" ~ paste0("10-fold CV AUC: ", round(auc1, 3))
model == "Test Set (Last 2 Months)" ~ paste0("Test Set (Last 2 Months) AUC: ", round(auc2, 3))
# Create a data frame for ggplot
roc_data1 <- data.frame(
specificity = 1 - roc_obj1$specificities,
sensitivity = roc_obj1$sensitivities,
model = "10-fold CV"
)
roc_data2 <- data.frame(
specificity = 1 - roc_obj2$specificities,
sensitivity = roc_obj2$sensitivities,
model = "Test Set (Last 2 Months)"
)
roc_data <- rbind(roc_data1, roc_data2)
# Calculate AUCs
auc1 <- auc(roc_obj1)
auc2 <- auc(roc_obj2)
roc_data <- roc_data %>%
mutate(model = case_when(
model == "10-fold CV" ~ paste0("10-fold CV AUC: ", round(auc1, 3))
model == "Test Set (Last 2 Months)" ~ paste0("Test Set (Last 2 Months) AUC: ", round(auc2, 3))
paste0("10-fold CV AUC: ", round(auc1, 3))
roc_data <- roc_data %>%
mutate(model = case_when(
model == "10-fold CV" ~ paste0("10-fold CV AUC: ", round(auc1, 3))
))
# Create a data frame for ggplot
roc_data1 <- data.frame(
specificity = 1 - roc_obj1$specificities,
sensitivity = roc_obj1$sensitivities,
model = "10-fold CV"
)
roc_data2 <- data.frame(
specificity = 1 - roc_obj2$specificities,
sensitivity = roc_obj2$sensitivities,
model = "Test Set (Last 2 Months)"
)
roc_data <- rbind(roc_data1, roc_data2)
# Calculate AUCs
auc1 <- auc(roc_obj1)
auc2 <- auc(roc_obj2)
roc_data <- roc_data %>%
mutate(model = case_when(
model == "10-fold CV" ~ paste0("10-fold CV AUC: ", round(auc1, 3)),
model == "Test Set (Last 2 Months)" ~ paste0("Test Set (Last 2 Months) AUC: ", round(auc2, 3))
))
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_x_reverse(limits = c(1, 0)) +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
title = "ROC Curves Comparison\n",
subtitle = paste0(
"10-fold CV AUC: ", round(auc1, 3), "\n",
"Test Set (Last 2 Months) AUC: ", round(auc2, 3)
),
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0.75, 0.25),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_x_reverse(limits = c(1, 0)) +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
title = "ROC Curves Comparison\n",
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0.75, 0.25),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_x_reverse(limits = c(1, 0)) +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
title = "ROC Curves Comparison\n",
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0, 0),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_x_reverse(limits = c(1, 0)) +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
title = "ROC Curves Comparison\n",
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0.2, 0.2),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_x_reverse(limits = c(1, 0)) +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
title = "ROC Curves Comparison\n",
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0.2, 0.1),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_x_reverse(limits = c(1, 0)) +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
title = "ROC Curves Comparison\n",
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0.3, 0.1),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_x_reverse(limits = c(1, 0)) +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
title = "ROC Curves Comparison\n",
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0.35, 0.1),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggsave("roc_curves.png", width = 10, height = 10, dpi = 300)
ggsave("roc_curves.png", width = 7, height = 7, dpi = 300)
ggsave("roc_curves.png", width = 8, height = 8, dpi = 300)
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_x_reverse(limits = c(1, 0)) +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
title = "ROC Curves Comparison\n",
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0.4, 0.1),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggsave("roc_curves.png", width = 8, height = 8, dpi = 300)
# Step 2: get a leave one out probability for each provider
final <- final %>%
group_by(ED_PROVIDER) %>%
mutate(Sum_prob=sum(predicted_prob, na.rm=T),
batch.tendency = (Sum_prob - predicted_prob) / (n() - 1)) %>%
ungroup()
roc_obj1 <- roc(final$batched, final$batch.tendency)
# Create a data frame for ggplot
roc_data1 <- data.frame(
specificity = 1 - roc_obj1$specificities,
sensitivity = roc_obj1$sensitivities,
model = "10-fold CV"
)
roc_data2 <- data.frame(
specificity = 1 - roc_obj2$specificities,
sensitivity = roc_obj2$sensitivities,
model = "Test Set (Last 2 Months)"
)
roc_data <- rbind(roc_data1, roc_data2)
# Calculate AUCs
auc1 <- auc(roc_obj1)
auc2 <- auc(roc_obj2)
roc_data <- roc_data %>%
mutate(model = case_when(
model == "10-fold CV" ~ paste0("10-fold CV AUC: ", round(auc1, 3)),
model == "Test Set (Last 2 Months)" ~ paste0("Test Set (Last 2 Months) AUC: ", round(auc2, 3))
))
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_x_reverse(limits = c(1, 0)) +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
title = "ROC Curves Comparison\n",
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0.4, 0.1),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_x_reverse(limits = c(1, 0)) +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
title = "ROC Curves Comparison\n",
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0.4, 0.1),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
roc_obj1 <- roc(final$batched, final$predicted_prob)
roc_obj2 <- roc(test$batched, test$predicted_prob)
# Create a data frame for ggplot
roc_data1 <- data.frame(
specificity = 1 - roc_obj1$specificities,
sensitivity = roc_obj1$sensitivities,
model = "10-fold CV"
)
roc_data2 <- data.frame(
specificity = 1 - roc_obj2$specificities,
sensitivity = roc_obj2$sensitivities,
model = "Test Set (Last 2 Months)"
)
roc_data <- rbind(roc_data1, roc_data2)
# Calculate AUCs
auc1 <- auc(roc_obj1)
auc2 <- auc(roc_obj2)
roc_data <- roc_data %>%
mutate(model = case_when(
model == "10-fold CV" ~ paste0("10-fold CV AUC: ", round(auc1, 3)),
model == "Test Set (Last 2 Months)" ~ paste0("Test Set (Last 2 Months) AUC: ", round(auc2, 3))
))
ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1') +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_x_reverse(limits = c(1, 0)) +
coord_equal() +
labs(
x = "1 - Specificity",
y = "Sensitivity",
title = "ROC Curves Comparison\n",
color = "Method for Predicting Batched Status"
) +
theme_minimal(base_size = 18) +
theme(
plot.background = element_rect(fill = 'white', color = NA),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 22, face = 'bold', hjust = 0.5, color = 'black'),
plot.margin = margin(t = 1, r = 0.2, b = 0.2, l = 0.2, unit = "cm"),
panel.grid.major = element_line(color = 'grey85', size = 0.3),
panel.grid.minor = element_blank(),
legend.position = c(0.4, 0.1),  # Position legend inside the plot
legend.background = element_rect(fill = "white", color = "black", size = 0.5),
legend.margin = margin(6, 6, 6, 6),
axis.title = element_text(size = 20, color = 'black'),
strip.text.x = element_text(size = 18, face = "bold", color = 'black') ,
axis.line = element_line(colour = "black")
)
ggsave("roc_curves.png", width = 9.5, height = 8, dpi = 300)
path <- '~/Sue Goldie Dropbox/Jacob Jameson/Batch vs sequential testing/Data/'
df <- read.csv(paste0(path, 'deidentified_FINAL.csv'))
test_columns = c("US_PERF", "NON_CON_CT_PERF", "CON_CT_PERF",
"LAB_PERF", "XR_PERF")
colnames(df)[colnames(df) == "PLAIN_XRAY"] = "XR_PERF"
colnames(df)[colnames(df) == "US_ORDER_DTTM_REL"] ="US_ORDER_DTTM_REL"
colnames(df)[colnames(df) == "CT_WITHOUT_CONTR_ORDER_DTTM_REL"] = "NON_CON_CT_ORDER_REL"
colnames(df)[colnames(df) == "CT_WITH_CONTR_ORDER_DTTM_REL"] ="CON_CT_ORDER_REL"
colnames(df)[colnames(df) == "LAB_ORDER_DTTM_REL"] ="LAB_ORDER_REL"
colnames(df)[colnames(df) == "PLAIN_XRAY_ORDER_DTTM_REL"] ="XR_ORDER_REL"
df$CT_PERF = ifelse(df$NON_CON_CT_PERF=='Y' | df$CON_CT_PERF=='Y', 1, 0)
for (i in test_columns){
df[[i]] = ifelse(df[[i]] =='Y', 1, 0)
}
df$nEDTests = rowSums(df[test_columns])
df$imgTests = df$nEDTests - df$LAB_PERF
# Identify columns with *_REL suffix
rel_cols <- grep("_REL$", names(df), value = TRUE)
# Apply the transformation to each *_REL column
for (col in rel_cols) {
df <- df %>%
separate(col, c(paste0(col, "_hours"), paste0(col, "_minutes")), sep = ":") %>%
mutate(!!col := as.numeric(get(paste0(col, "_hours"))) * 60 +
as.numeric(get(paste0(col, "_minutes"))))
}
df <- df %>%
select(-matches("_hours$|_minutes$"))
# Columns of interest
cols_of_interest <- c('US_ORDER_DTTM_REL', 'NON_CON_CT_ORDER_REL',
'CON_CT_ORDER_REL', 'XR_ORDER_REL')
# Function to check if any two values are within 5 of each other
check_within_five <- function(row) {
vals <- as.numeric(row[cols_of_interest])
vals <- na.omit(vals)
# Check each combination of columns
for (i in 1:(length(vals) - 1)) {
for (j in (i + 1):length(vals)) {
if (abs(vals[i] - vals[j]) <= 5) {
return(TRUE)
}
}
}
return(FALSE)
}
# Apply the function to each row of the dataframe
df$within_five <- apply(df[cols_of_interest], 1, check_within_five)
# Output a summary of how many rows have values within 5 of each other
summary(df$within_five)
# Apply the function to each row of the dataframe
df$within_five <- apply(df[cols_of_interest], 1, check_within_five)
# Function to check if any two values are within 5 of each other, robust to NA values
check_within_five <- function(row) {
# Extract only the columns of interest for the current row
vals <- as.numeric(row[cols_of_interest])
# Remove NA values to avoid false comparisons
vals <- na.omit(vals)
# Ensure there are at least two values to compare
if (length(vals) < 2) {
return(FALSE)
}
# Check each combination of columns
for (i in 1:(length(vals) - 1)) {
for (j in (i + 1):length(vals)) {
if (abs(vals[i] - vals[j]) <= 5) {
return(TRUE)
}
}
}
return(FALSE)
}
# Apply the function to each row of the dataframe
df$within_five <- apply(df[cols_of_interest], 1, check_within_five)
# Output a summary of how many rows have values within 5 of each other
summary(df$within_five)
# Function to determine batch
determine_batch <- function(row) {
min_time <- min(row, na.rm = TRUE)
tests <- names(row)
batch <- tests[which(row <= min_time + 5 & !is.na(row))]
return(paste(batch, collapse = ","))
}
# Apply function to each row for the columns of interest
df$batch <- apply(df[cols_of_interest], 1, determine_batch)
# Determine all tests that were ordered
df$all_tests <- apply(df[cols_of_interest], 1, function(row) {
tests <- names(row)
return(paste(tests[!is.na(row)], collapse = ","))
})
# get the difference between batched tests and all tests
df$diff <- apply(df, 1, function(row) {
batch <- unlist(strsplit(as.character(row["batch"]), ","))
all_tests <- unlist(strsplit(as.character(row["all_tests"]), ","))
diff <- setdiff(all_tests, batch)
if (length(diff) > 0) {
return(paste(diff, collapse = ","))
} else {
return(NA)
}
})
df$batched <- ifelse(str_count(df$batch, ",") > 0, 1, 0)
table(df$batched)
2852 - 2660
2660/2852
192/43299
path <- '~/Sue Goldie Dropbox/Jacob Jameson/Batch vs sequential testing/Data/'
df <- read.csv(paste0(path, 'deidentified_FINAL.csv'))
df %>% filter(ESI == 1) %>% view()
df %>% filter(ESI == 5) %>% view()
