
> #=========================================================================
> # Purpose: Main R file for Preparing/Cleaning Data
> # Author: Jacob Ja .... [TRUNCATED] 

> df <- read.csv(paste0(path, 'deidentified_FINAL.csv'))

> test_columns = c("US_PERF", "NON_CON_CT_PERF", "CON_CT_PERF", 
+                  "LAB_PERF", "XR_PERF")

> colnames(df)[colnames(df) == "PLAIN_XRAY"] = "XR_PERF"

> colnames(df)[colnames(df) == "US_ORDER_DTTM_REL"] ="US_ORDER_DTTM_REL"

> colnames(df)[colnames(df) == "CT_WITHOUT_CONTR_ORDER_DTTM_REL"] = "NON_CON_CT_ORDER_REL"

> colnames(df)[colnames(df) == "CT_WITH_CONTR_ORDER_DTTM_REL"] ="CON_CT_ORDER_REL"

> colnames(df)[colnames(df) == "LAB_ORDER_DTTM_REL"] ="LAB_ORDER_REL"

> colnames(df)[colnames(df) == "PLAIN_XRAY_ORDER_DTTM_REL"] ="XR_ORDER_REL"

> df$CT_PERF = ifelse(df$NON_CON_CT_PERF=='Y' | df$CON_CT_PERF=='Y', 1, 0)

> for (i in test_columns){
+   df[[i]] = ifelse(df[[i]] =='Y', 1, 0) 
+ }

> df$nEDTests = rowSums(df[test_columns])

> df$imgTests = df$nEDTests - df$LAB_PERF

> # Identify columns with *_REL suffix
> rel_cols <- grep("_REL$", names(df), value = TRUE)

> # Apply the transformation to each *_REL column
> for (col in rel_cols) {
+   df <- df %>%
+     separate(col, c(paste0(col, "_hours"), paste0(col,  .... [TRUNCATED] 

> df <- df %>%
+   select(-matches("_hours$|_minutes$"))

> #=========================================================================
> # Determine batching
> #   - criteria: images ordered within 5 minutes  .... [TRUNCATED] 

> # Function to check if any two values are within 5 of each other, robust to NA values
> check_within_five <- function(row) {
+   # Extract only the  .... [TRUNCATED] 

> # Apply the function to each row of the dataframe
> df$within_five <- apply(df[cols_of_interest], 1, check_within_five)

> df$within_five <- as.numeric(df$within_five)

> # Function to determine batch
> determine_batch <- function(row) {
+   
+   min_time <- min(row, na.rm = TRUE)
+   tests <- names(row)
+   
+   batc .... [TRUNCATED] 

> # Apply function to each row for the columns of interest
> df$batch <- apply(df[cols_of_interest], 1, determine_batch)

> # Determine all tests that were ordered
> df$all_tests <- apply(df[cols_of_interest], 1, function(row) {
+   tests <- names(row)
+   return(paste(te .... [TRUNCATED] 

> # get the difference between batched tests and all tests
> df$diff <- apply(df, 1, function(row) {
+   batch <- unlist(strsplit(as.character(row["ba ..." ... [TRUNCATED] 

> df$batched <- ifelse(str_count(df$batch, ",") > 0, 1, 0)

> #=========================================================================
> # Clean Chief Complaint ----------------------------------------------- .... [TRUNCATED] 

> for (i in seq(1,length(complaints))){
+   name <- names(complaints[i])
+   complaint <- complaints[[i]]
+   
+   df$CHIEF_COMPLAINT <- ifelse(
+     .... [TRUNCATED] 

> df$ESI = as.character(df$ESI)

> df <- df %>%
+   mutate(complaint_esi  = paste(ESI, CHIEF_COMPLAINT),
+          complaint_esi = factor(complaint_esi))

> #=========================================================================
> # Categorize Vital Signs ---------------------------------------------- .... [TRUNCATED] 

> df$tachypneic <- ifelse(
+   is.na(df$TRIAGE_RR)  == F  & df$TRIAGE_RR > 20, 1, 0
+ )

> df$febrile <- ifelse(
+   is.na(df$TRIAGE_TEMP)  == F  & df$TRIAGE_TEMP > 38, 1, 0
+ )

> df$hypotensive <- ifelse(
+   is.na(df$TRIAGE_SBP)  == F  & df$TRIAGE_SBP < 90, 1, 0
+ )

> #=========================================================================
> # Create Time FE ------------------------------------------------------ .... [TRUNCATED] 

> # Define arbitrary start date
> start_date <- as.POSIXct("2018-10-06 00:00:00", tz = "UTC")

> # Convert relative minutes to datetime
> df$datetime <- start_date + minutes(df$rel_minutes_arrival) - minutes(min(df$rel_minutes_arrival))

> # Extract hour of day, day of week, and month of year
> df$hour_of_day <- hour(df$datetime)

> df$hour_of_day <- cut(df$hour_of_day, breaks = c(-Inf, 6, 12, 18, Inf), 
+                       labels = c("Block 1", "Block 2", "Block 3", "Block  ..." ... [TRUNCATED] 

> df$day_of_week <- weekdays(df$datetime)

> df$month_of_year <- month(df$datetime, label = TRUE)

> df$dayofweekt <- paste(df$day_of_week, df$hour_of_day)

> # Calculate the number of patients in the hospital at the time of 
> # each patient's arrival
> df$patients_in_hospital <- sapply(df$rel_minutes_arr .... [TRUNCATED] 

> #=========================================================================
> # Create Final Dataset ------------------------------------------------ .... [TRUNCATED] 

> final <- df %>% 
+   mutate(RTN_72_HR = ifelse(RTN_72_HR == 'Y', 1, 0),
+          RTN_72_HR_ADMIT = ifelse(RTN_72_HR_ADMIT == 'Y', 1, 0)) 

> final$admit = ifelse(final$ED_DISPOSITION == 'Admit', 1, 0)

> final$discharge = ifelse(final$ED_DISPOSITION == 'Discharge', 1, 0)

> final$observation = ifelse(final$ED_DISPOSITION == 'Hospital Observation', 1, 0)

> final <- final %>%
+   mutate(dispo = case_when(
+     admit == 1 ~ 'admit',
+     discharge == 1 ~ 'discharge',
+     observation == 1 ~ 'observera .... [TRUNCATED] 

> # Limit dataset to only physicians that had more than 520 encounters
> provider_counts <- table(final$ED_PROVIDER)

> providers_less_than_500 <- names(provider_counts[provider_counts < 520])

> final <- final[!(final$ED_PROVIDER %in% providers_less_than_500), ]

> final$complaint_esi <- paste(final$CHIEF_COMPLAINT, final$ESI)

> # Limit to prevalent complaints only
> final <- final %>%
+   group_by(CHIEF_COMPLAINT) %>%
+   filter(n() > 1000) %>%
+   ungroup() %>%
+   filter( .... [TRUNCATED] 

> #=========================================================================
> # Create Batch Tendency ----------------------------------------------- .... [TRUNCATED] 

> final$fold <- sample(1:10, nrow(final), replace = TRUE)

> final <- arrange(final, fold)

> # Pre-allocate predictions
> predictions <- numeric(nrow(final))

> # Loop over the folds
> for (i in 1:10) {
+   # Split the data into training and testing sets
+   train_data <- final[final$fold != i, ]
+   test_da .... [TRUNCATED] 
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10

> # Assign predictions to the final dataset
> final$predicted_prob <- predictions

> # Step 2: get a leave one out probability for each provider
> final <- final %>%
+   group_by(ED_PROVIDER) %>%
+   mutate(Sum_prob=sum(predicted_pro .... [TRUNCATED] 

> final$batch.tendency <- as.vector(scale(final$batch.tendency))

> test <- final %>%
+   filter(datetime >= '2019-10-01') 

> train <- final %>%
+   filter(datetime < '2019-10-01') 

> # Step 3: fit a logistic regression model to predict batched
> glm_model <- feglm(0|batched ~ ED_PROVIDER + dayofweekt + month_of_year + CHIEF_COMPL .... [TRUNCATED] 

> test$predicted_prob <- predict(glm_model, test, type = 'response')

> roc_obj1 <- roc(final$batched, final$predicted_prob)

> roc_obj2 <- roc(test$batched, test$predicted_prob)

> # Create a data frame for ggplot
> roc_data1 <- data.frame(
+   specificity = 1 - roc_obj1$specificities,
+   sensitivity = roc_obj1$sensitivities,
 .... [TRUNCATED] 

> roc_data2 <- data.frame(
+   specificity = 1 - roc_obj2$specificities,
+   sensitivity = roc_obj2$sensitivities,
+   model = "Test Set (Last 2 Month ..." ... [TRUNCATED] 

> roc_data <- rbind(roc_data1, roc_data2)

> # Calculate AUCs
> auc1 <- auc(roc_obj1)

> auc2 <- auc(roc_obj2)

> roc_data <- roc_data %>%
+   mutate(model = case_when(
+     model == "10-fold CV" ~ paste0("10-fold CV AUC: ", round(auc1, 3)),
+     model == "Tes ..." ... [TRUNCATED] 

> ggplot(roc_data, aes(x = specificity, y = sensitivity, color = model)) +
+   geom_line(size = 1) +
+   scale_color_brewer(palette = 'Set1') +  
+    .... [TRUNCATED] 

> ggsave("outputs/figures/S1.pdf", width = 9.5, height = 8, dpi = 300)

> rm(list = setdiff(ls(), "final"))

> data <- final

> #=========================================================================

> #=========================================================================
> # Purpose: Generate Figures and Tables for the Manuscript
> # Author: J .... [TRUNCATED] 

> create_dummy_variables <- function(data, categorical_var) {
+   dummy_encoder <- dummyVars(paste("~", categorical_var), data = data)
+   encoded_dat .... [TRUNCATED] 

> create_esi_dummies <- function(data) {
+   esi_vars <- paste0("ESI", 1:5)
+   for (i in 1:5) {
+     data[[esi_vars[i]]] <- as.integer(data$ESI == i .... [TRUNCATED] 

> # Performs Wald test for balance checking across physicians
> # Returns test results and p-value for multiple comparison adjustment
> perform_wald_t .... [TRUNCATED] 

> generate_balance_table <- function(data, 
+                                    output_file,
+                                    clinical_vars = c(" ..." ... [TRUNCATED] 

> results <- generate_balance_table(
+   data = patient_data,
+   output_file = "outputs/tables/S2A.txt"
+ )

> ##########################################################################
> #====================================================================== .... [TRUNCATED] 

> data_for_plot <- data_for_plot %>% 
+   mutate(CHIEF_COMPLAINT = ifelse(
+     CHIEF_COMPLAINT == "Falls, Motor Vehicle Crashes, Assaults, and Traum ..." ... [TRUNCATED] 

> ggplot(data = data_for_plot, aes(x = reorder(CHIEF_COMPLAINT, -batch_rate), 
+                                  y = batch_rate,
+                    .... [TRUNCATED] 

> ggsave("outputs/figures/Figure 1.pdf", 
+        width = 15, height = 13, dpi = 300, bg = 'white')

> ##########################################################################
> #====================================================================== .... [TRUNCATED] 

> get_predictions <- function(model, predictor) {
+   ggpredict(model, terms = c(paste(predictor, "[-2:2, by=.1]")), 
+             vcov.type = "HC0", .... [TRUNCATED] 

> preds <- get_predictions(model, "batch.tendency")

> data.p <- data.frame(batch.tendency = preds$xvals, 
+                      predicted_prob = preds$coef, 
+                      lwr = preds$lower, u .... [TRUNCATED] 

> data.p %>%
+   ggplot(aes(x = batch.tendency, y = predicted_prob)) +
+   geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.8, fill = "#a6cee3") +
+ .... [TRUNCATED] 

> ggsave("outputs/figures/S2A.pdf", width = 10.5, height = 8, bg = 'white')

> ##########################################################################
> #====================================================================== .... [TRUNCATED] 

> data_for_plot$group <- 'ED_LOS'

> data_for_plot <- rbind(data_for_plot, 
+                        data.frame(ED_LOS = data$ln_ED_LOS, group = 'ln_ED_LOS'))

> data_for_plot %>%
+   mutate(group = ifelse(
+     group == 'ED_LOS', 'ED Length of Stay', 
+     'Log Transformed ED Length of Stay')) %>%
+   ggpl .... [TRUNCATED] 

> ggsave("outputs/figures/S3A.pdf", width = 11.5, height = 7, bg = 'white')

> ################################################################################
> #================================================================ .... [TRUNCATED] 

> # Function to generate regression tables
> generate_tables <- function(models, outcome_name, output_file, 
+                             omit_vars = .... [TRUNCATED] 

> # Main analysis
> main_analysis <- function(data, output_file) {
+   sink(output_file)
+   
+   # 1. LOS Analysis
+   los_models <- run_regression_m .... [TRUNCATED] 

> # Run the analysis
> main_analysis(data, "outputs/tables/Table 1.txt")

> ################################################################################
> #================================================================ .... [TRUNCATED] 

> data$ESI_cat <- as.factor(data$ESI_cat)

> complaints <- unique(data$CHIEF_COMPLAINT)

> model_for_complaint <- function(complaint, esi, outcome_var) {
+   formula <- as.formula(paste(outcome_var, "~ batch.tendency | LAB_PERF + dayofweek ..." ... [TRUNCATED] 

> results <- data.frame(
+   coef = numeric(),
+   cse = numeric(),
+   complaint = character(),
+   esi = character(),
+   outcome_var = character()
 .... [TRUNCATED] 

> r_number <- 1

> total_tests <- length(complaints) * 2 * 3  # 2 ESI categories, 3 outcome variables

> adjusted_alpha <- 0.05 / total_tests

> z_value <- qnorm(1 - adjusted_alpha / 2)  # Calculate z-value for the adjusted alpha

> for (complaint in complaints) {
+   for (esi in c('ESI \n1 or 2', 'ESI \n3, 4, or 5')) {
+     for (outcome in c('ln_ED_LOS', 'imgTests', 'RTN_72_HR .... [TRUNCATED] 

> results <- results %>%
+   mutate(
+     coef = as.numeric(coef),
+     cse = as.numeric(cse),
+     CI_lower_b = coef - z_value * cse,
+     CI_upp .... [TRUNCATED] 

> results %>%
+   mutate(
+     complaint = ifelse(
+       complaint == "Falls, Motor Vehicle Crashes, Assaults, and Trauma",
+       "Assaults and T ..." ... [TRUNCATED] 

> ggsave("outputs/figures/Figure 2.pdf", width = 16, height = 15.5, dpi = 300, bg = 'white')
